// <auto-generated />
using System;
using CoffeeTracker.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeTracker.Api.Migrations
{
    [DbContext(typeof(CoffeeTrackerDbContext))]
    [Migration("20250710150049_AddSessionIdToCoffeeEntry")]
    partial class AddSessionIdToCoffeeEntry
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("CoffeeTracker.Api.Models.CoffeeEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoffeeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Type of coffee consumed (e.g., Espresso, Latte)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Size of the coffee (e.g., Small, Medium, Large)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Source of the coffee (e.g., coffee shop name)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("When the coffee was consumed (UTC)");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_CoffeeEntries_Timestamp")
                        .HasAnnotation("Description", "Index for time-based queries and analytics");

                    b.ToTable("CoffeeEntries");
                });

            modelBuilder.Entity("CoffeeTracker.Api.Models.CoffeeShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Address of the coffee shop");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("When the coffee shop record was created (UTC)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Whether the coffee shop is active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Name of the coffee shop");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_CoffeeShops_IsActive")
                        .HasAnnotation("Description", "Index for filtering active coffee shops");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_CoffeeShops_Name")
                        .HasAnnotation("Description", "Index for coffee shop name searches");

                    b.ToTable("CoffeeShops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Home"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Multiple Locations",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Starbucks"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Multiple Locations",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Dunkin' Donuts"
                        },
                        new
                        {
                            Id = 4,
                            Address = "123 Main Street",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Local Coffee House"
                        },
                        new
                        {
                            Id = 5,
                            Address = "456 Oak Avenue",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Peet's Coffee"
                        },
                        new
                        {
                            Id = 6,
                            Address = "789 Elm Street",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "The Coffee Bean & Tea Leaf"
                        },
                        new
                        {
                            Id = 7,
                            Address = "321 Pine Road",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Blue Bottle Coffee"
                        },
                        new
                        {
                            Id = 8,
                            Address = "654 Maple Drive",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Tim Hortons"
                        },
                        new
                        {
                            Id = 9,
                            Address = "987 Cedar Lane",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Costa Coffee"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
